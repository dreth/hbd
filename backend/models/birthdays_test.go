// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBirthdays(t *testing.T) {
	t.Parallel()

	query := Birthdays()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBirthdaysDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Birthday{}
	if err = randomize.Struct(seed, o, birthdayDBTypes, true, birthdayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Birthday struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Birthdays().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBirthdaysQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Birthday{}
	if err = randomize.Struct(seed, o, birthdayDBTypes, true, birthdayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Birthday struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Birthdays().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Birthdays().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBirthdaysSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Birthday{}
	if err = randomize.Struct(seed, o, birthdayDBTypes, true, birthdayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Birthday struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BirthdaySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Birthdays().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBirthdaysExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Birthday{}
	if err = randomize.Struct(seed, o, birthdayDBTypes, true, birthdayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Birthday struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BirthdayExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Birthday exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BirthdayExists to return true, but got false.")
	}
}

func testBirthdaysFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Birthday{}
	if err = randomize.Struct(seed, o, birthdayDBTypes, true, birthdayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Birthday struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	birthdayFound, err := FindBirthday(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if birthdayFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBirthdaysBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Birthday{}
	if err = randomize.Struct(seed, o, birthdayDBTypes, true, birthdayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Birthday struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Birthdays().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBirthdaysOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Birthday{}
	if err = randomize.Struct(seed, o, birthdayDBTypes, true, birthdayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Birthday struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Birthdays().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBirthdaysAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	birthdayOne := &Birthday{}
	birthdayTwo := &Birthday{}
	if err = randomize.Struct(seed, birthdayOne, birthdayDBTypes, false, birthdayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Birthday struct: %s", err)
	}
	if err = randomize.Struct(seed, birthdayTwo, birthdayDBTypes, false, birthdayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Birthday struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = birthdayOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = birthdayTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Birthdays().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBirthdaysCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	birthdayOne := &Birthday{}
	birthdayTwo := &Birthday{}
	if err = randomize.Struct(seed, birthdayOne, birthdayDBTypes, false, birthdayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Birthday struct: %s", err)
	}
	if err = randomize.Struct(seed, birthdayTwo, birthdayDBTypes, false, birthdayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Birthday struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = birthdayOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = birthdayTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Birthdays().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func birthdayBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Birthday) error {
	*o = Birthday{}
	return nil
}

func birthdayAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Birthday) error {
	*o = Birthday{}
	return nil
}

func birthdayAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Birthday) error {
	*o = Birthday{}
	return nil
}

func birthdayBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Birthday) error {
	*o = Birthday{}
	return nil
}

func birthdayAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Birthday) error {
	*o = Birthday{}
	return nil
}

func birthdayBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Birthday) error {
	*o = Birthday{}
	return nil
}

func birthdayAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Birthday) error {
	*o = Birthday{}
	return nil
}

func birthdayBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Birthday) error {
	*o = Birthday{}
	return nil
}

func birthdayAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Birthday) error {
	*o = Birthday{}
	return nil
}

func testBirthdaysHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Birthday{}
	o := &Birthday{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, birthdayDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Birthday object: %s", err)
	}

	AddBirthdayHook(boil.BeforeInsertHook, birthdayBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	birthdayBeforeInsertHooks = []BirthdayHook{}

	AddBirthdayHook(boil.AfterInsertHook, birthdayAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	birthdayAfterInsertHooks = []BirthdayHook{}

	AddBirthdayHook(boil.AfterSelectHook, birthdayAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	birthdayAfterSelectHooks = []BirthdayHook{}

	AddBirthdayHook(boil.BeforeUpdateHook, birthdayBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	birthdayBeforeUpdateHooks = []BirthdayHook{}

	AddBirthdayHook(boil.AfterUpdateHook, birthdayAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	birthdayAfterUpdateHooks = []BirthdayHook{}

	AddBirthdayHook(boil.BeforeDeleteHook, birthdayBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	birthdayBeforeDeleteHooks = []BirthdayHook{}

	AddBirthdayHook(boil.AfterDeleteHook, birthdayAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	birthdayAfterDeleteHooks = []BirthdayHook{}

	AddBirthdayHook(boil.BeforeUpsertHook, birthdayBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	birthdayBeforeUpsertHooks = []BirthdayHook{}

	AddBirthdayHook(boil.AfterUpsertHook, birthdayAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	birthdayAfterUpsertHooks = []BirthdayHook{}
}

func testBirthdaysInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Birthday{}
	if err = randomize.Struct(seed, o, birthdayDBTypes, true, birthdayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Birthday struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Birthdays().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBirthdaysInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Birthday{}
	if err = randomize.Struct(seed, o, birthdayDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Birthday struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(birthdayColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Birthdays().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBirthdayToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Birthday
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, birthdayDBTypes, true, birthdayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Birthday struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := BirthdaySlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*Birthday)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testBirthdayToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Birthday
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, birthdayDBTypes, false, strmangle.SetComplement(birthdayPrimaryKeyColumns, birthdayColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Birthdays[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testBirthdayToOneRemoveOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Birthday
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, birthdayDBTypes, false, strmangle.SetComplement(birthdayPrimaryKeyColumns, birthdayColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.User().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.User != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UserID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Birthdays) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testBirthdaysReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Birthday{}
	if err = randomize.Struct(seed, o, birthdayDBTypes, true, birthdayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Birthday struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBirthdaysReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Birthday{}
	if err = randomize.Struct(seed, o, birthdayDBTypes, true, birthdayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Birthday struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BirthdaySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBirthdaysSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Birthday{}
	if err = randomize.Struct(seed, o, birthdayDBTypes, true, birthdayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Birthday struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Birthdays().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	birthdayDBTypes = map[string]string{`ID`: `uuid`, `UserID`: `uuid`, `Name`: `text`, `DateOfBirth`: `date`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`}
	_               = bytes.MinRead
)

func testBirthdaysUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(birthdayPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(birthdayAllColumns) == len(birthdayPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Birthday{}
	if err = randomize.Struct(seed, o, birthdayDBTypes, true, birthdayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Birthday struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Birthdays().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, birthdayDBTypes, true, birthdayPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Birthday struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBirthdaysSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(birthdayAllColumns) == len(birthdayPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Birthday{}
	if err = randomize.Struct(seed, o, birthdayDBTypes, true, birthdayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Birthday struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Birthdays().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, birthdayDBTypes, true, birthdayPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Birthday struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(birthdayAllColumns, birthdayPrimaryKeyColumns) {
		fields = birthdayAllColumns
	} else {
		fields = strmangle.SetComplement(
			birthdayAllColumns,
			birthdayPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BirthdaySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBirthdaysUpsert(t *testing.T) {
	t.Parallel()

	if len(birthdayAllColumns) == len(birthdayPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Birthday{}
	if err = randomize.Struct(seed, &o, birthdayDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Birthday struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Birthday: %s", err)
	}

	count, err := Birthdays().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, birthdayDBTypes, false, birthdayPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Birthday struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Birthday: %s", err)
	}

	count, err = Birthdays().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
